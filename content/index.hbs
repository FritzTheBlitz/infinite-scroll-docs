---
isHomepage: true
layout: doc
---

<div class="duo" style="margin-top: 40px">
  <div class="duo__cell">
    <a class="button button--big-ol" href="demo/full-page">View full page demo</a>
  </div>
  <div class="duo__cell">
    <a class="button button--big-ol" href="demo/masonry">View Masonry images demo</a>
  </div>
</div>

<p style="font-size: 1.2rem;">Infinite Scroll is a JavaScript plugin that automatically adds the next page, saving users from a full page load. You&rsquo;ve likely seen it in use all over the web.</p>

{{! ----------------------------------------------------------------- }}

<h2>Install</h2>

{{! ----------------------------------------------------------------- }}

<h3>Download</h3>

<ul>
  <li><a href="{{sourceUrlPath}}infinite-scroll.pkgd.min.js">infinite-scroll.pkgd.min.js</a> minified, or</li>
  <li><a href="{{sourceUrlPath}}infinite-scroll.pkgd.js">infinite-scroll.pkgd.js</a> un-minified</li>
</ul>

{{! ----------------------------------------------------------------- }}

<h3>CDN</h3>

<p>Link directly to Infinite Scroll files on <a href="https://unpkg.com/">unpkg</a>.</p>

``` html
<script src="https://unpkg.com/infinite-scroll@3/dist/infinite-scroll.pkgd.min.js"></script>
<!-- or -->
<script src="https://unpkg.com/infinite-scroll@3/dist/infinite-scroll.pkgd.js"></script>
```

{{! ----------------------------------------------------------------- }}

<h3>Package managers</h3>

<p>Install with <a href="https://npmjs.com/package/infinite-scroll">npm</a>: <code>npm install infinite-scroll</code></p>

<p>Install with Yarn: <code>yarn add infinite-scroll</code></p>

<p>Install with Bower: <code>bower install infinite-scroll --save</code></p>

{{! ----------------------------------------------------------------- }}

<h2>License</h2>

{{! ----------------------------------------------------------------- }}

<h3>Commercial license</h3>

<p>If you want to use Infinite Scroll to develop commercial sites, themes, projects, and applications, the Commercial license is the appropriate license. With this option, your source code is kept proprietary. <a href="license.html">Read more about Infinite Scroll commercial licensing</a>.</p>

<p>Once purchased, you&rsquo;ll receive a commercial license PDF and be all set to use Infinite Scroll in your commercial applications.</p>

<div class="buy-button-trio">
  {{#licenses.developer}}
    {{> buy-button}}
  {{/licenses.developer}}

  {{#licenses.team}}
    {{> buy-button}}
  {{/licenses.team}}

  {{#licenses.organization}}
    {{> buy-button}}
  {{/licenses.organization}}
</div>

{{! ----------------------------------------------------------------- }}

<h3>Open source license</h3>

<p>If you are creating an open source application under a license compatible with the <a href="https://www.gnu.org/licenses/gpl-3.0.html">GNU GPL license v3</a>, you may use Infinite Scroll under the terms of the GPLv3. <a href="license.html">Read more about Infinite Scroll open source licensing</a>.</p>

{{! ----------------------------------------------------------------- }}

<h2>Getting started</h2>

<p>Include the Infinite Scroll <code>.js</code> file in your site.</p>

``` html
<script src="/path/to/infinite-scroll.pkgd.min.js"></script>
```

<p>Infinite Scroll works on a container element with item elements.</p>

``` html
<div class="container">
  <article class="post">...</article>
  <article class="post">...</article>
  <article class="post">...</article>
  ...
</div>
```

<p>There are several ways to initialize Infinite Scroll.</p>

{{! ----------------------------------------------------------------- }}

<h3>Initialize with jQuery</h3>

<p>You can use Infinite Scroll as a jQuery plugin: <code>$(<span class="string">'selector'</span>).infiniteScroll()</code>.</p>

``` js
$('.container').infiniteScroll({
  // options
  path: '.pagination__next',
  append: '.post',
  history: false,
});
```

{{! ----------------------------------------------------------------- }}

<h3>Initialize with vanilla JavaScript</h3>

<p>You can use Infinite Scroll with vanilla JS: <code><span class="keyword">new</span> InfiniteScroll( elem )</code>. The <code>InfiniteScroll()</code> constructor accepts two arguments: the container element and an options object.</p>

``` js
var elem = document.querySelector('.container');
var infScroll = new InfiniteScroll( elem, {
  // options
  path: '.pagination__next',
  append: '.post',
  history: false,
});

// element argument can be a selector string
//   for an individual element
var infScroll = new InfiniteScroll( '.container', {
  // options
});
```

{{! ----------------------------------------------------------------- }}

<h3>Initialize with HTML</h3>

<p>You can initialize Infinite Scroll in HTML, without writing any JavaScript. Add <code>data-infinite-scroll</code> attribute to the carousel element. <a href="options.html">Options</a> can be set in its value.</p>


``` html
<div class="container"
  data-infinite-scroll='{ "path": ".pagination__next", "append": ".post", "history": false }'>
```

<div class="call-out">
  <p>Options set in HTML must be valid JSON. Keys need to be quoted, for example <code>"path":</code>. Note that the attribute value uses single quotes <code>'</code>, but the JSON entities use double-quotes <code>"</code>.</p>
</div>

{{! ----------------------------------------------------------------- }}

<h3>Next</h3>

<ul>
  <li><a href="options.html">Options</a></li>
  <li><a href="api.html">API</a></li>
</ul>

{{! ----------------------------------------------------------------- }}

<h2>Features</h2>

<div class="duo">
  <div class="duo__cell">
    <h3>Back-button friendly</h3>

    <p>Infinite Scroll upholds URLs by <a href="options.html#history">changing them automatically</a> as the user scrolls. Users can refresh the current page or return to a scrolled page and their position will be maintained. No more tears when you scroll 20 pages and accidentally hit refresh. <a href="demo/full-page/">Try out the full page demo</a>.</p>
  </div>
  <div class="duo__cell">
    <h3>Easy start, powerful build</h3>

    <p>Infinite Scroll works out-of-the-box with any blog or WordPress site. With its robust array of <a href="options.html">options</a>, <a href="api.html">methods</a>, and <a href="events.html">events</a>, you can add custom behaviors, notifications, and loading animations to fully integrate Infinite Scroll into your user experience.</p>
  </div>
</div>


<div class="duo">
  <div class="duo__cell">
    <h3>Versatile UI</h3>

    <p>Rather load with a button than use scrolling? <a href="options.html#button">Got it</a>. What about scrolling a couple pages, then using a button? <a href="extras.html#scroll-2-pages-then-use-button">Got that</a>. Or load with your own specific logic? <a href="api.html#loadnextpage">Yup</a>.</p>

    {{> button-option}}
    {{> edit-demo default="VWWqYW" vanillaJS="xrdERX" }}
  </div>

  <div class="duo__cell">
    <h3>Masonry, Isotope, &amp; Packery</h3>

    <p><a href="https://masonry.desandro.com">Masonry</a>, <a href="https://isotope.metafizzy.co">Isotope</a>, &amp; <a href="https://packery.metafizzy.co">Packery</a> layouts <a href="options.html#outlayer">plug right into Infinite Scroll</a>. These features combine to create a rich visual grid for wandering eyes.</p>

    {{> masonry-small}}
  </div>
</div>
