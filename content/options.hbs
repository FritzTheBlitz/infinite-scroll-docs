---
title: Options
layout: doc
description: Customize Infinite Scroll with options.
---

{{! ----------------------------------------------------------------- }}

<h2>Loading</h2>

{{! ----------------------------------------------------------------- }}

<h3>path</h3>

<p>Determines the URL for the next page. <strong>Required</strong>.</p>

<p>Set to a selector string of a link to the next page to use its <code>href</code> value for incremental page numbers (2, 3, 4...).</p>

``` html
<a class="pagination__next" href="/page/2">Next</a>
```

``` js
path: '.pagination__next'
// parse href of element
// => /page/2, /page/3, page/4 ...
```

<p><a href="demo/full-page">View full page demo with <code>path</code> selector string</a>.</p>

<p>Set to a string with <code>\{{#}}</code> for the incremental page number.</p>

``` js
path: 'news/blog-p\{{#}}.html'
// replace \{{#}} with page number
// => news/blog-p2.html, news/blog-p3.html, news/blog-p4.html...
```

<p>Set to a function that returns the URL for page URLs that do not use incremental numbers. For example, A List Apart articles increment by 10. Use <a href="api.html#pageindex"><code>pageIndex</code></a> and <a href="api.html#loadcount"><code>loadCount</code></a> properties to calculate the URL.</p>

``` js
path: function() {
  var pageNumber = ( this.loadCount + 1 ) * 10;
  return '/articles/P' + pageNumber;
}
// => /articles/P10, /articles/P20, /articles/P30 ...
```

<p>For another example, this documentation site uses a function to get the next URL from an array.</p>

``` js
var nextPages = [
  'index',
  'options',
  'api',
  'events',
  'extras',
  'license',
];

$('.container').infiniteScroll({
  path: function() {
    return nextPages[ this.loadCount ] + '.html';
  },
  // options...
});
```

<p>This technique is used in <a href="https://codepen.io/desandro/pens/tags/?grid_type=list&selected_tag=infinite-scroll-v3-docs">all the CodePen demos</a>.</p>

{{! ----------------------------------------------------------------- }}

<h3>append</h3>

<p>Appends selected elements from loaded page to the container. Disabled by default <code><span class="comment">append: false</span></code></p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    append: '.post'
    // append .post elements from next page to container
    ```
  </div>
  <div class="duo__cell example__demo">
    {{> append}}
    {{> edit-demo default="WOjqNM" vanillaJS="WOpjMM"}}
  </div>
</div>

Disable appending by not setting <code>append</code>, for loading JSON or adding your own append behavior like with <a href="extras.html#metafizzy-layout-libraries">Masonry or Isotope</a>.


``` js
// disabled by default
// append: false
// do not append any content on page load
```

{{! ----------------------------------------------------------------- }}

<h3>checkLastPage</h3>

<p>Checks if Infinite Scroll has reached the last page. This prevents Infinite Scroll from requesting a non-existent page. <a href="events.html#last"><code>last</code> event</a> will be triggered when last page is reached. Enabled by default <code><span class="comment">checkLastPage: true</span></code>.</p>


<p>When set to <code><span class="comment">checkLastPage: true</span></code> and <a href="#path"><code>path</code></a> set to a selector string, Infinite Scroll will check if the loaded page has the <code>path</code> selector. Requires <code><span class="comment"><a href="#responsetype">responseType</a>: 'document'</span></code>.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    // checkLastPage: true,
    // checkLastPage enabled by default
    path: '.pagination__next',
    // check last page for .pagination__next
    ```
  </div>
  <div class="duo__cell example__demo">
    <p>This demo uses <a href="#button"><code>button</code></a> to show that Infinite Scroll will not attempt to load page 5 and that the button will be hidden when there are no more pages to load.</p>
    {{> button-option}}
  </div>
</div>

<p>If <code>path</code> is set to a string with <code>\{{#}}</code> or a function, set <code>checkLastPage</code> to a selector string to check for that selector.</p>

``` js
path: 'news/blog-p\{{#}}.html',
// path set to string with \{{#}}
checkLastPage: '.pagination__next',
// check page for .pagination__next
```

<p>If <code>path</code> is set a function, Infinite Scroll will check if that function returns a value.</p>

``` js
path: function() {
  // no value returned after 4th loaded page
  if ( this.loadCount < 4 ) {
    var nextIndex = this.loadCount + 2;
    return 'news/blog-p' + nextIndex + '.html';
  }
}
```

<p>When disabled, Infinite Scroll will attempt to load the next page.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    checkLastPage: false
    // disabled
    ```
  </div>
  <div class="duo__cell example__demo">
    {{> check-last-page-disabled}}
  </div>
</div>

{{! ----------------------------------------------------------------- }}

<h3>prefill</h3>

<p>Loads and appends pages on intialization until scroll requirement is met.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    prefill: true
    // load pages on init until user can scroll
    ```
  </div>
  <div class="duo__cell example__demo">
    {{> prefill}}
    {{> edit-demo default="VWWVyj" vanillaJS="WOjxKP"}}
  </div>
</div>

{{! ----------------------------------------------------------------- }}

<h3>responseType</h3>

<p>Sets the type of response returned by the page request. See <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">MDN docs XMLHttpRequest.responseType</a>.</p>

``` js
// responseType: 'document'
// default, return next page's DOM
```

<p>Set <code>responseType: <span class="string">'text'</span></code> to return flat text for loading JSON.</p>

``` js
$container.infiniteScroll({
  path: '/api/page\{{#}}.json',
  append: false,
  responseType: 'text',
});

$container.on( 'load.infiniteScroll', function( event, response ) {
  // parse JSON
  var data = JSON.parse( response );
  // do something with JSON...
});
```

<p>See demos on CodePen:</p>

<ul>
  <li><a href="https://codepen.io/desandro/pen/LLjYgG/">Loading JSON</a></li>
  <li><a href="https://codepen.io/desandro/pen/JJNNqP/">Loading JSON, vanilla JS</a></li>
  <li><a href="https://codepen.io/desandro/pen/QgMWzV/">Loading JSON with Masonry</a></li>
  <li><a href="https://codepen.io/desandro/pen/LLyeJB/">Loading JSON with Masonry, vanilla JS</a></li>
</ul>

{{! ----------------------------------------------------------------- }}

<h3>outlayer</h3>

<p>Integrates <a href="https://masonry.desandro.com">Masonry</a>, <a href="https://isotope.metafizzy.co">Isotope</a> or <a href="https://packery.metafizzy.co">Packery</a>. Infinite Scroll will add appended items to the layout.</p>

``` js
outlayer: instance
```

<p class="argument">
  <code class="argument__code">instance</code>
  <span class="argument__type"><i>Masonry</i>, <i>Isotope</i>, or <i>Packery</i></span>
  <span class="argument__description">The layout class instance</span>
</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    // with Masonry & jQuery
    // init Masonry
    var $grid = $('.grid').masonry({
      // Masonry options...
      itemSelector: '.grid__item', 
    });

    // get Masonry instance
    var msnry = $grid.data('masonry');

    // init Infinite Scroll
    $grid.infiniteScroll({
      // Infinite Scroll options...
      append: '.grid__item',
      outlayer: msnry,
    });
    ```
  </div>
  <div class="duo__cell example__demo">
    {{> masonry-small}}
  </div>
</div>


``` js
// with Masonry & vanilla JS
// init Masonry
var msnry = new Masonry( '.grid', {
  // Masonry options...
  itemSelector: '.grid__item', 
});

// init Infinite Scroll
var infScroll = new InfiniteScroll( '.grid', {
  // Infinite Scroll options...
  append: '.grid__item',
  outlayer: msnry,
});
```

<div class="call-out">
  <p><code>outlayer</code> requires <a href="https://imagesloaded.desandro.com">imagesLoaded</a>. It already <em>is</em> included with <code>infinite-scroll.pkgd.js</code>, but not with Infinite Scroll when installed with a package manager like npm or Yarn. You need to install and require <code>imagesloaded</code> separately. See details in <a href="extras.html">Extras</a>.</p>
</div>

<p>With Isotope:</p>

<div class="duo">
  <div class="duo__cell">
    ``` js
    // with Isotope & jQuery
    // init Isotope
    var $grid = $('.grid').isotope({
      // Isotope options...
      itemSelector: '.grid__item', 
    });

    // get Isotope instance
    var iso = $grid.data('isotope');

    // init Infinite Scroll
    $grid.infiniteScroll({
      // Infinite Scroll options...
      append: '.grid__item',
      outlayer: iso,
    });
    ```
  </div>
  <div class="duo__cell">
    ``` js
    // with Isotope & vanilla JS
    // init Isotope
    var iso = new Isotope( '.grid', {
      // Isotope options...
      itemSelector: '.grid__item', 
    });

    var infScroll = new InfiniteScroll( '.grid', {
      // Infinite Scroll options...
      append: '.grid__item',
      outlayer: iso,
    });
    ```
  </div>
</div>

<p>With Packery:</p>

<div class="duo">
  <div class="duo__cell">
    ``` js
    // with Packery & jQuery
    // init Packery
    var $grid = $('.grid').packery({
      // Packery options...
      itemSelector: '.grid__item', 
    });

    // get Packery instance
    var pckry = $grid.data('packery');

    // init Infinite Scroll
    $grid.infiniteScroll({
      // Infinite Scroll options...
      append: '.grid__item',
      outlayer: pckry,
    });
    ```
  </div>
  <div class="duo__cell">
    ``` js
    // with Packery & vanilla JS
    // init Packery
    var pckry = new Packery( '.grid', {
      // Packery options...
      itemSelector: '.grid__item', 
    });

    var infScroll = new InfiniteScroll( '.grid', {
      // Infinite Scroll options...
      append: '.grid__item',
      outlayer: pckry,
    });
    ```
  </div>
</div>

{{! ----------------------------------------------------------------- }}

<h3>onInit</h3>

<p>Called on initialization. Useful for initial binding <a href="events.html">events</a> with vanilla JS.</p>

``` js
onInit: function() {
  this.on( 'load', function() {
    console.log('Infinite Scroll load')
  });
}
```

{{! ----------------------------------------------------------------- }}

<h2>Scrolling</h2>

{{! ----------------------------------------------------------------- }}

<h3>scrollThreshold</h3>

<p>Sets the distance between the viewport to scroll area for <a href="events.html#scrollthreshold"><code>scrollThreshold</code> event</a> to be triggered. Default: <code><span class="comment">scrollThreshold: 400</span></code>.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    scrollThresold: 100
    // trigger scrollThreshold event when viewport is <100px from bottom of scroll area
    ```
  </div>
  <div class="duo__cell example__demo">
    {{> scroll-threshold-option}}
  </div>
</div>

<p>Disable loading on scroll and the <code>scrollThreshold</code> event with <code>scrollThreshold: false</code>. This is useful if loading with <a href="#button"><code>button</code></a>.</p>

``` js
scrollThreshold: false
// disable loading on scroll
// and scrollThreshold event from triggering
```

{{! ----------------------------------------------------------------- }}

<h3>elementScroll</h3>

<p>Sets scroller to an element for overflow element scrolling. Disabled by default, <code>window</code> is used to scroll.</p>

<p>We recommend disabling <a href="#history"><code>history</code></a> with <code>elementScroll</code>.</p>

<p>Set <code>elementScroll</code> to a selector string or element to use a different parent element. This is useful if a <a href="#status"><code>status</code> element</a> or <a href="#button"><code>button</code></a> is at the bottom of the scroll area.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` html
    <!-- .sidebar is scrollable -->
    <div class="sidebar">
      <!-- .container has scroll content -->
      <div class="container">
        <article class="post">...</article>">...</div>
        <article class="post">...</article>">...</div>
        ...
      </div>
      <!-- status is at bottom of scroll -->
      <div class="page-load-status">
        <p class="infinite-scroll-request">Loading...</p>
        ...
      </div>
    </div>
    ```

    ``` js
    // content will be appended to .container
    $('.container').infiniteScroll({
      // options...
      elementScroll: '.sidebar',
      // use .sidebar overflow element scrolling
    });
    ```
  </div>
  <div class="duo__cell example__demo">
    {{> append}}
    {{> edit-demo default="Kqqrrb" vanillaJS="MomexY"}}
   </div>
</div>

<p>Set <code>elementScroll: <span class="literal">true</span></code> to use the container element.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` html
    <!-- .container is scrollable and has scroll content -->
    <div class="container">
      <article class="post">...</article>">...</div>
      <article class="post">...</article>">...</div>
      ...
    </div>
    ```

    ``` js
    // content will be appended to .container
    $('.container').infiniteScroll({
      // options...
      elementScroll: true,
      // use .container overflow element scrolling
    });
    ```
  </div>
  <div class="duo__cell example__demo">
    {{> element-scroll-container}}
  </div>
</div>

{{! ----------------------------------------------------------------- }}

<h3>loadOnScroll</h3>

<p>Loads next page when scroll crosses over <a href="#scrollthreshold"><code>scrollThreshold</code></a>. Enabled by default <code><span class="comment">loadOnScroll: true</span></code>.</p>

<p>Disable <code>loadOnScroll</code> if you do not want to load pages on scroll, but still want the <a href="events.html#scrollthreshold"><code>scrollThreshold</code> event</a> triggered.</p>

``` js
loadOnScroll: false
// disable loading pages on scroll
// scrollThreshold event still triggered
```

<p>Otherwise, you can disable both loading on scroll and <code>scrollThreshold</code> event by disabling <code>scrollThreshold</code>.</p>

``` js
scrollThreshold: false
// disable loading pages on scroll
// and scrollThreshold event
```

{{! ----------------------------------------------------------------- }}

<h2>History options</h2>

{{! ----------------------------------------------------------------- }}

<h3>history</h3>

<p>Changes the browser history and URL.</p>

<p>Enabled by default <code><span class="comment">history: 'replace'</span></code> will use <a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API#The_replaceState()_method"><code>history.replaceState()</code></a> to change the current history entry. Going back in the browser will return the user to previous site.</p>

<p><a href="demo/full-page">View full page demo with <code>history: 'replace'</code></a>.</p>

<p>Set <code>history: <span class="string">'push'</span></code> to use <a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API#The_pushState()_method"><code>history.pushState()</code></a> to create new history entries for each page change. Going back in the browser will load the previous page.</p>


``` js
history: 'push'
// create new history entry for each page
```

{{! TODO history push demo? }}

<p>When enabled with <a href=#append><code>append</code></a> enabled, history will be changed when the appended page is scrolled into view. Users may scroll up and down, and history will reflect the URL of the content in the view.</p>

<p>When enabled with <code>append</code> disabled, history will be changed only when a page is loaded.</p>

{{! ----------------------------------------------------------------- }}

<h3>historyTitle</h3>

<p>Updates the window title. Requires <code>history</code> enabled. Enabled by default <code><span class="comment">historyTitle: true</span></code>.</p>

``` js
historyTitle: false
// do not change window title when history changes
```

{{! ----------------------------------------------------------------- }}

<h2>UI</h2>

{{! ----------------------------------------------------------------- }}

<h3>hideNav</h3>

<p>Hides navigation element.</p>

``` html
<!-- hide pagination with infinite scroll enabled -->
<div class="pagination">
  <span class="pagination__current">Page 1</span>
  <a class="pagination__next" href="/page/2">Next</a>
</div>
```

``` js
hideNav: '.pagination'
```

{{> edit-demo default="vZZQoJ" vanillaJS="qjmaNV"}}

{{! ----------------------------------------------------------------- }}

<h3>status</h3>

<p>Displays status elements indicating state of page loading. Within the selected element:</p>

<ul>
  <li><code>.infinite-scroll-request</code> element will be displayed on
    <a href="events.html#request"><code>request</code></a></li>
  <li><code>.infinite-scroll-last</code> element will be displayed on
    <a href="events.html#last"><code>last</code></a></li>
  <li><code>.infinite-scroll-error</code> element will be displayed on
    <a href="events.html#error"><code>error</code></a></li>
</ul>

<p>The selected <code>status</code> element will be hidden on <a href="events.html#append"><code>append</code></a> or <a href="events.html#load"><code>load</code></a>.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` html
    <div class="page-load-status">
      <p class="infinite-scroll-request">Loading...</p>
      <p class="infinite-scroll-last">End of content</p>
      <p class="infinite-scroll-error">No more pages to load</p>
    </div>
    ```

    ``` js
    status: '.page-load-status'
    ```
  </div>
  <div class="duo__cell example__demo">
    {{> status}}
    {{> edit-demo default="WOjqNM" vanillaJS="WOpjMM"}}
  </div>
</div>

{{! ----------------------------------------------------------------- }}

<h3>button</h3>

<p>Enables a button to load pages on click. The button will state will be hooked in to Infinite Scroll events:</p>

<ul>
  <li>Disabled while loading on <a href="events.html#request"><code>request</code></a></li>
  <li>Re-enabled after page is loaded on <a href="events.html#load"><code>load</code></a></li>
  <li>Hidden when no more pages to load on <a href="events.html#error"><code>error</code></a> and <a href="events.html#last"><code>last</code></a></li>
</ul>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    button: '.view-more-button',
    // load pages on button click
    scrollThreshold: false,
    // disable loading on scroll
    ```
  </div>
  <div class="duo__cell example__demo">
    {{> button-option }}
    {{> edit-demo default="VWWqYW" vanillaJS="xrdERX" }}
  </div>
</div>

{{! ----------------------------------------------------------------- }}

<h3>debug</h3>

<p>Logs events and state changes to the console.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    debug: true
    ```
  </div>
  <div class="duo__cell example__demo">
    <p>View logs in your browser's Developer Console.</p>
    {{> debug}}
  </div>
</div>
