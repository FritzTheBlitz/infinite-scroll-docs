---
title: Extras
layout: doc
description: "Everything else about Infinite Scroll: module loaders, loading JSON, extra demos."
---

{{! ----------------------------------------------------------------- }}

<h2>Module loaders</h2>

{{! ----------------------------------------------------------------- }}

<h3>Webpack &amp; Browserify</h3>

<p>Install Infinite Scroll with npm or Yarn.</p>

<div class="duo">
  <div class="duo__cell">
    ``` bash
    # npm
    npm install infinite-scroll
    ```
  </div>
  <div class="duo__cell">
    ``` bash
    # Yarn
    yarn add infinite-scroll
    ```
  </div>
</div>

<p>You can then <code><span class="built_in">require</span>(<span class="string">'infinite-scroll'</span>)</code>.</p>

``` js
// main.js
const InfiniteScroll = require('infinite-scroll');

let infScroll = new InfiniteScroll( '.container', {
  // options...
});
```

<p>Compile your JS with Webpack or Browserify.</p>

<div class="duo">
  <div class="duo__cell">
    ``` bash
    # Webpack
    webpack main.js bundle.js
    ```
  </div>
  <div class="duo__cell">
    ``` bash
    # Browserify
    browserify main.js -o bundle.js
    ```
  </div>
</div>

<p>To use Infinite Scroll as a jQuery plugin, you need to call <a href="https://www.npmjs.com/package/jquery-bridget">jQuery Bridget</a>.</p>

<div class="duo">
  <div class="duo__cell">
    ``` bash
    # npm
    npm install jquery-bridget
    ```
  </div>
  <div class="duo__cell">
    ``` bash
    # Yarn
    yarn add jquery-bridget
    ```
  </div>
</div>

``` js
// main.js
const $ = require('jquery');
const jQueryBridget = require('jquery-bridget');
const InfiniteScroll = require('infinite-scroll');

// make Infinite Scroll a jQuery plugin
jQueryBridget( 'infiniteScroll', InfiniteScroll, $ );
// now you can use $().infiniteScroll()
$('.container').infiniteScroll({...});
```

<p>When installed with a package manager, Infinite Scroll does not include <code>imagesLoaded</code>, which is required to use <a href="options.html#outlayer"><code>outlayer</code></a>. You will need to install and require <code>imagesLoaded</code> separately.</p>

<div class="duo">
  <div class="duo__cell">
    ``` bash
    # npm
    npm install imagesloaded
    ```
  </div>
  <div class="duo__cell">
    ``` bash
    # Yarn
    yarn add imagesloaded
    ```
  </div>
</div>

``` js
// main.js
const Masonry = require('masonry-layout');
const InfiniteScroll = require('infinite-scroll');
const imagesLoaded = require('imagesloaded');

// init Masonry
let msnry = new Masonry( '.container', {...});

// make imagesLoaded available for InfiniteScroll
InfiniteScroll.imagesLoaded = imagesLoaded;

// now you can use outlayer option
let infScroll = new InfiniteScroll( '.container', {
  // options...
  outlayer: msnry,
});
```

{{! ----------------------------------------------------------------- }}

<h2>Loading JSON</h2>

<p>Here is one example of how to use Infinite Scroll to load JSON data and append content. We'll use the Unsplash API to load pages of photos.</p>

``` js
let $container = $('.container').infiniteScroll({
  path: function() {
    return 'https://api.unsplash.com/photos?client_id=...&page=' + this.pageIndex;
  },
  // load page as JSON
  responseBody: 'json',
  // disable history
  history: false,
});

$container.on( 'load.infiniteScroll', function( event, body ) {
  // body is JSON, put that data into template
  let itemsHTML = template.compile( body );
  // convert to jQuery object
  let $items = $( itemsHTML );
  // append items
  $container.append( $items );
});
```

{{> edit-demo default="abmYbxr" vanillaJS="YzGazmq" }}

<p>See additional demos:</p>

<ul>
  <li><a href="https://codepen.io/desandro/pen/rNMdaNR/">Loading JSON with Masonry</a></li>
  <li><a href="https://codepen.io/desandro/pen/ExgEaaB/">Loading JSON with Masonry, vanilla JS</a></li>
</ul>

{{! ----------------------------------------------------------------- }}

<h2>Button behaviors</h2>

{{! ----------------------------------------------------------------- }}

<h3>Click button to start loading on scroll</h3>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    let $container = $('.container').infiniteScroll({
      // options...
      // disable loading on scroll
      loadOnScroll: false,
    });

    let $viewMoreButton = $('.view-more-button');
    $viewMoreButton.on( 'click', function() {
      // load next page
      $container.infiniteScroll('loadNextPage');
      // enable loading on scroll
      $container.infiniteScroll( 'option', {
        loadOnScroll: true,
      });
      // hide button
      $viewMoreButton.hide();
    });
    ```
  </div>
  <div class="duo__cell example__demo">
    {{> button-start}}
  </div>
</div>

{{! ----------------------------------------------------------------- }}

<h3>Scroll 2 pages, then load with button</h3>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    let $container = $('.container').infiniteScroll({
      // options...
      // enable button
      button: '.view-more-button',
    });

    let $viewMoreButton = $('.view-more-button');

    // get Infinite Scroll instance
    let infScroll = $container.data('infiniteScroll');

    $container.on( 'load.infiniteScroll', onPageLoad );

    function onPageLoad() {
      if ( infScroll.loadCount == 1 ) {
        // after 2nd page loaded
        // disable loading on scroll
        $container.infiniteScroll( 'option', {
          loadOnScroll: false,
        });
        // show button
        $viewMoreButton.show();
        // remove event listener
        $container.off( 'load.infiniteScroll', onPageLoad );
      }
    }
    ```
  </div>
  <div class="duo__cell example__demo">
    {{> scroll-2}}
  </div>
</div>

{{! ----------------------------------------------------------------- }}

<h2>Loading URLs from loaded pages</h2>

<p>You can use Infinite Scroll to load the next article page by updating the next URL from the loaded page. For example, the current URL is <code>/news/alpha</code>, and its next link <code>/news/beta</code>; and when you load <code>/news/beta</code>, its next link is <code>/news/gamma</code>.</p>

<p>To do so, you can use a <code>nextURL</code> variable and update it on <a href="events.html#load"><code>load</code></a>, then set <a href="options.html#path"><code>path</code></a> to a function to return <code>nextURL</code>.</p>

``` js
let nextURL;

function updateNextURL( doc ) {
  nextURL = $( doc ).find('.pagination__next').attr('href');
}
// get initial nextURL
updateNextURL( document );

// init Infinite Scroll
let $container = $('.container').infiniteScroll({
  // use function to set custom URLs
  path: function() {
    return nextURL;
  },
});

// update nextURL on page load
$container.on( 'load.infiniteScroll', function( event, body ) {
  updateNextURL( body );
});
```

{{! ----------------------------------------------------------------- }}

<h2>Loading animations</h2>

<p>Feel free to use these loading animations within <a href="options.html#status"><code>.infinite-scroll-request</code> status element</a>.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` html
    <div class="loader-ellips">
      <span class="loader-ellips__dot"></span>
      <span class="loader-ellips__dot"></span>
      <span class="loader-ellips__dot"></span>
      <span class="loader-ellips__dot"></span>
    </div>
    ```

    ``` css
    .loader-ellips {
      font-size: 20px; /* change size here */
      position: relative;
      width: 4em;
      height: 1em;
      margin: 10px auto;
    }

    .loader-ellips__dot {
      display: block;
      width: 1em;
      height: 1em;
      border-radius: 0.5em;
      background: #555; /* change color here */
      position: absolute;
      animation-duration: 0.5s;
      animation-timing-function: ease;
      animation-iteration-count: infinite;
    }

    .loader-ellips__dot:nth-child(1),
    .loader-ellips__dot:nth-child(2) {
      left: 0;
    }
    .loader-ellips__dot:nth-child(3) { left: 1.5em; }
    .loader-ellips__dot:nth-child(4) { left: 3em; }

    @keyframes reveal {
      from { transform: scale(0.001); }
      to { transform: scale(1); }
    }

    @keyframes slide {
      to { transform: translateX(1.5em) }
    }

    .loader-ellips__dot:nth-child(1) {
      animation-name: reveal;
    }

    .loader-ellips__dot:nth-child(2),
    .loader-ellips__dot:nth-child(3) {
      animation-name: slide;
    }

    .loader-ellips__dot:nth-child(4) {
      animation-name: reveal;
      animation-direction: reverse;
    }
    ```
  </div>
  <div class="duo__cell example__demo">
    {{> loader-ellips}}
    {{> edit-demo default="owWLYz" }}
  </div>
</div>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` html
    <div class="loader-wheel">
      <i><i><i><i><i><i><i><i><i><i><i><i>
      </i></i></i></i></i></i></i></i></i></i></i></i>
    </div>
    ```

    ``` css
    .loader-wheel {
      font-size: 64px; /* change size here */
      position: relative;
      height: 1em;
      width: 1em;
      padding-left: 0.45em;
      overflow: hidden;
      margin: 0 auto;
      animation: loader-wheel-rotate 0.5s steps(12) infinite;
    }

    .loader-wheel i {
      display: block;
      position: absolute;
      height: 0.3em;
      width: 0.1em;
      border-radius: 0.05em;
      background: #333; /* change color here */
      opacity: 0.8;
      transform: rotate(-30deg);
      transform-origin: center 0.5em;
    }

    @keyframes loader-wheel-rotate {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    ```
  </div>
  <div class="duo__cell example__demo">
    {{> loader-wheel}}
    {{> edit-demo default="KqadKj" }}
  </div>
</div>

<p></p>

{{! ----------------------------------------------------------------- }}

<h2>Google Analytics</h2>

<p>Use Infinite Scroll events to <a href="https://developers.google.com/analytics/devguides/collection/analyticsjs/pages">track pageviews with Google Analytics</a>.</p>

<p>With <a href="options.html#history"><code>history</code> option</a> enabled, use the <a href="events.html#history"><code>history</code> event</a>.</p>

``` js
$container.on( 'history.infiniteScroll', function() {
  ga( 'set', 'page', location.pathname );
  ga( 'send', 'pageview' );
});
```

<p>With <code>history</code> option disabled, use the <a href="events.html#append"><code>append</code> or <a href="events.html#load"><code>load</code></a> event</a>.</p>

``` js
// link used to get absolute path, beginning with /
let link = document.createElement('a');

$container.on( 'append.infiniteScroll', function( event, response, path ) {
  link.href = path;
  ga( 'set', 'page', link.pathname );
  ga( 'send', 'pageview' );
});
```

{{! ----------------------------------------------------------------- }}

<h2>Browser support</h2>

<p>Infinite Scroll v4 supports Chrome 60+, Edge 79+, Firefox 55+, Safari 11+.</p>

<p>For IE10 and Android 4 support, try <a href="https://v3.infinite-scroll.com/">Infinite Scroll v3</a>.</p>

{{! ----------------------------------------------------------------- }}

<h2>Upgrading from v3</h2>

<p>Infinite Scroll v4 is mostly backwards compatible with v3.</p>

<p>The one breaking change is that Infinite Scroll v4 removed <code>responseType</code> option in favor of <a href="options.html#responsebody"><code>responseBody</code></a>. This change effects loading JSON in particular. To load JSON with Infinite Scroll v4, set <code>responseBody: <span class="comment">'json'</span></code> in your options. Then the <code>body</code> argument in the load event will be <i>JSON</i>.</p>

<div class="duo">
  <div class="duo__cell">
    ``` js
    // Infinite Scroll v3
    let $container = $('.container').infiniteScroll({
      path: function() {
        return 'https://api.unsplash.com/photos?client_id=...&page=' + this.pageIndex;
      },
      // load page as text
      responseType: 'text',
      // disable history
      history: false,
    });

    $container.on( 'load.infiniteScroll', function( event, response ) {
      // parse response text into JSON data
      var data = JSON.parse( response );
      // put that data into template
      var itemsHTML = template.compile( data );
      // convert to jQuery object
      var $items = $( itemsHTML );
      // append items
      $container.infiniteScroll( 'appendItems', $items );
    });
    ```
  </div>
  <div class="duo__cell">
    ``` js
    // Infinite Scroll v4
    let $container = $('.container').infiniteScroll({
      path: function() {
        return 'https://api.unsplash.com/photos?client_id=...&page=' + this.pageIndex;
      },
      // load page as json
      responseBody: 'json',
      // disable history
      history: false,
    });

    $container.on( 'load.infiniteScroll', function( event, body ) {
      // body is JSON data
      var itemsHTML = template.compile( body );
      // convert to jQuery object
      var $items = $( itemsHTML );
      // append items
      $container.infiniteScroll( 'appendItems', $items );
    });
    ```
  </div>
</div>

<h3>New features</h3>

<ul>
  <li>Uses <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch">fetch API</a> to make requests</li>
  <li><a href="api.html#loadnextpage"><code>loadNextPage</code></a> returns a Promise</li>
  <li>Set headers and fetch options with <a href="options.html#fetchoptions"><code>fetchOptions</code></a></li>
  <li>10% smaller filesize</li>
  <li>Internet Explorer support dropped</li>
</ul>

{{! ----------------------------------------------------------------- }}

<h2>Issues</h2>

<h3>Reduced test cases</h3>

<p>Creating a reduced test case is the best way to debug problems and report issues. Read <a href="https://css-tricks.com/reduced-test-cases/">CSS Tricks</a> on why they&rsquo;re so great.</p>

<p>Create a reduced test case for Infinite Scroll by forking any one of the <a href="https://codepen.io/collection/DZejqa?grid_type=list&sort_by=item_created_at">CodePen demos</a> from these docs.</p>

<ul>
  <li>A reduced test case clearly demonstrates the bug or issue.</li>
  <li>It contains the bare minimum HTML, CSS, and JavaScript required to demonstrate the bug.</li>
  <li>A link to your production site is <b>not</b> a reduced test case.</li>
</ul>

<p>Creating a reduced test case is the best way to get your issue addressed. They help you point out the problem. They help us debug the problem. They help others understand the problem.</p>

{{! ----------------------------------------------------------------- }}

<h3>Submitting issues</h3>

<p>Report <a href="https://github.com/metafizzy/infinite-scroll/issues/">issues on GitHub</a>. Make sure to include a <strong>reduced test case</strong>. Without a reduced test case, your issue may be closed.</p>

{{! ----------------------------------------------------------------- }}

<h3>Feature requests</h3>

<p>Help us select new features by looking over <a href="https://github.com/metafizzy/infinite-scroll/labels/feature%20request">requested features on the GitHub issue tracker</a> and adding your <strong>+1 reaction</strong> to features you&rsquo;d like to see added.</p>
