---
title: Extras
layout: doc
---

{{! ----------------------------------------------------------------- }}

<h2>Module loaders</h2>

{{! ----------------------------------------------------------------- }}

<h3>Webpack &amp; Browserify</h3>

<p>Install Infinite Scroll with npm or Yarn.</p>


<div class="duo">
  <div class="duo__cell">
    ``` bash
    # npm
    npm install infinite-scroll
    ```
  </div>
  <div class="duo__cell">
    ``` bash
    # Yarn
    yarn add infinite-scroll
    ```
  </div>
</div>

<p>You can then <code><span class="built_in">require</span>(<span class="string">'infiniteScroll'</span>)</code>.</p>

``` js
// main.js
var InfiniteScroll = require('infinite-scroll');

var infScroll = new InfiniteScroll( '.container', {
  // options...
});
```

<p>Compile your JS with Webpack or Browserify.</p>

<div class="duo">
  <div class="duo__cell">
    ``` bash
    # Webpack
    webpack main.js bundle.js
    ```
  </div>
  <div class="duo__cell">
    ``` bash
    # Browserify
    browserify main.js -o bundle.js
    ```
  </div>
</div>

<p>To use Infinite Scroll as a jQuery plugin, you need to call <a href="https://www.npmjs.com/package/jquery-bridget">jQuery Bridget</a>.</p>

<div class="duo">
  <div class="duo__cell">
    ``` bash
    # npm
    npm install jquery-bridget
    ```
  </div>
  <div class="duo__cell">
    ``` bash
    # Yarn
    yarn add jquery-bridget
    ```
  </div>
</div>

``` js
// main.js
var $ = require('jquery');
var jQueryBridget = require('jquery-bridget');
var InfiniteScroll = require('infinite-scroll');

// make Infinite Scroll a jQuery plugin
jQueryBridget( 'infiniteScroll', InfiniteScroll, $ );
// now you can use $().infiniteScroll()
$('.container').infiniteScroll({...});
```

<p>When installed with a package manager, Infinite Scroll does not include <code>imagesLoaded</code>, which is required to use <a href="options.html#outlayer"><code>outlayer</code></a>. You will need to install and require <code>imagesLoaded</code> separately.</p>

<div class="duo">
  <div class="duo__cell">
    ``` bash
    # npm
    npm install imagesloaded
    ```
  </div>
  <div class="duo__cell">
    ``` bash
    # Yarn
    yarn add imagesloaded
    ```
  </div>
</div>

``` js
// main.js
var Masonry = require('masonry-layout');
var InfiniteScroll = require('infinite-scroll');
var imagesLoaded = require('imagesloaded');

// init Masonry
var msnry = new Masonry( '.container', {...});

// make imagesLoaded available for InfiniteScroll
InfiniteScroll.imagesLoaded = imagesLoaded;

// now you can use outlayer option
var infScroll = new InfiniteScroll( '.container', {
  // options...
  outlayer: msnry,
});
```

{{! ----------------------------------------------------------------- }}

<h3>Requirejs</h3>

<p>Infinite Scroll supports <a href="http://requirejs.org/">RequireJS</a>.</p>

<p>You can require infinite-scroll.pkgd.js.</p>

``` js
requirejs( [
  'path/to/infinite-scroll.pkgd.js',
], function( InfiniteScroll ) {
  var infScroll = new InfiniteScroll( '.container', {...});
});
```

<p>To use Infinite Scroll as a jQuery plugin with RequireJS and infinite-scroll.pkgd.js, you need to call <a href="https://github.com/desandro/jquery-bridget">jQuery Bridget</a>.</p>

``` js
// require the require function
requirejs( [ 'require', 'jquery', 'path/to/infinite-scroll.pkgd.js' ],
  function( require, $, InfiniteScroll ) {
    // require jquery-bridget, it's included in infinite-scroll.pkgd.js
    require( [ 'jquery-bridget/jquery-bridget' ],
      function( jQueryBridget ) {
        // make Infinite Scroll a jQuery plugin
        jQueryBridget( 'infiniteScroll', InfiniteScroll, $ );
        // now you can use $().infiniteScroll()
        $('.container').infiniteScroll({...});
    });
});
```

<p>Or, you can require Infinite Scroll's index.js by using a package manager: npm, Bower, or Yarn. Set <code>baseUrl</code> to the package install path and set a config path for all your application code.</p>

``` js
requirejs.config({
  baseUrl: 'node_modules/', // npm install path
  paths: {
    app: '../'
  },
});

requirejs( [
  'infinite-scroll/js/index',
  'app/my-component.js',
], function( InfiniteScroll, myComp ) {
  var infScroll = new InfiniteScroll( '.container', {...});
});
```

<p>You can require dependencies and use Infinite Scroll as a jQuery plugin with jQuery Bridget.</p>

``` js
requirejs.config({
  baseUrl: 'node_modules/',
  paths: {
    jquery: 'jquery/jquery'
  },
});

requirejs( [
    'jquery',
    'infinite-scroll/js/index',
    'jquery-bridget/jquery-bridget',
  ],
  function( $, InfiniteScroll ) {
    // make Infinite Scroll a jQuery plugin
    $.bridget( 'infiniteScroll', InfiniteScroll, $ );
    // now you can use $().infiniteScroll()
    $('.container').infiniteScroll({...});
});
```

<p>Infinite Scroll does not include <code>imagesLoaded</code>, which is required to use <a href="options.html#outlayer"><code>outlayer</code></a>. You will need to install and require <code>imagesLoaded</code> separately.</p>

``` js
requirejs.config({
  baseUrl: 'node_modules/', // npm install path
  paths: {
    app: '../'
  },
});

requirejs( [
  'masonry-layout/masonry',
  'imagesloaded/imagesloaded',
  'infinite-scroll/js/index',
  'app/my-component.js',
], function( Masonry, imagsLoaded InfiniteScroll, myComp ) {
  // init Masonry
  var msnry = new Masonry( '.container', {...});

  // make imagesLoaded available for Infinite Scroll
  InfiniteScroll.imagesLoaded = imagesLoaded;

  // now you can use outlayer option
  var infScroll = new InfiniteScroll( '.container', {
    // options...
    outlayer: msnry,
  });
});
```

{{! ----------------------------------------------------------------- }}

<h2>Loading JSON</h2>

<p>Here is one example of how to use Infinite Scroll to load JSON data and append content. We'll use the Unsplash API to load pages of photos.</p>

``` js
var $container = $('.container').infiniteScroll({
  path: 'https://api.unsplash.com/photos?client_id=...&page=\{{#}}',
  // load page as text
  responseType: 'text',
  // disable history
  history: false,
});

$container.on( 'load.infiniteScroll', function( event, response ) {
  // prase response text into JSON data
  var data = JSON.parse( response );
  // put that data into template
  var itemsHTML = template.compile( data );
  // convert to jQuery object
  var $items = $( itemsHTML );
  // append items
  $container.infiniteScroll( 'appendItems', $items );
});
```

https://codepen.io/desandro/pen/7bccf0c9c843a910b455c9b2aceda20f

{{! ----------------------------------------------------------------- }}

<h2>Button behaviors</h2>

{{! ----------------------------------------------------------------- }}

<h3>Click button to start loading on scroll</h3>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    var $container = $('.container').infiniteScroll({
      // options...
      // disable loading on scroll
      loadOnScroll: false,
    });

    var $viewMoreButton = $('.view-more-button');
    $viewMoreButton.on( 'click', function() {
      // load next page
      $container.infiniteScroll('loadNextPage');
      // enable loading on scroll
      $container.infiniteScroll( 'option', {
        loadOnScroll: true,
      });
      // hide button
      $viewMoreButton.hide();
    });
    ```
  </div>
  <div class="duo__cell example__demo">
    {{> button-start}}
  </div>
</div>

{{! ----------------------------------------------------------------- }}

<h3>Scroll 2 pages, then load with button</h3>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    var $container = $('.container').infiniteScroll({
      // options...
      // enable button
      button: '.view-more-button',
    });

    var $viewMoreButton = $('.view-more-button');

    // get Infinite Scroll instance
    var infScroll = $container.data('infiniteScroll');

    $container.on( 'load.infiniteScroll', onPageLoad );

    function onPageLoad() {
      if ( infScroll.loadCount == 1 ) {
        // after 2nd page loaded
        // disable loading on scroll
        $container.infiniteScroll( 'option', {
          loadOnScroll: false,
        });
        // show button
        $viewMoreButton.show();
        // remove event listener
        $container.off( 'load.infiniteScroll', onPageLoad );
      }
    }
    ```
  </div>
  <div class="duo__cell example__demo">
    {{> scroll-2}}
  </div>
</div>

{{! ----------------------------------------------------------------- }}

<h2>Loading animations</h2>

<p>Feel free to use these loading animations within <a href="options.html#status"><code>.infinite-scroll-request</code> status element</a>.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` html
    <div class="loader-ellips">
      <span class="loader-ellips__dot"></span>
      <span class="loader-ellips__dot"></span>
      <span class="loader-ellips__dot"></span>
      <span class="loader-ellips__dot"></span>
    </div>
    ```

    ``` css
    .loader-ellips {
      font-size: 20px; /* change size here */
      position: relative;
      width: 4em;
      height: 1em;
      margin: 10px auto;
    }

    .loader-ellips__dot {
      display: block;
      width: 1em;
      height: 1em;
      border-radius: 0.5em;
      background: #555; /* change color here */
      position: absolute;
      animation-duration: 0.5s;
      animation-timing-function: ease;
      animation-iteration-count: infinite;
    }

    .loader-ellips__dot:nth-child(1),
    .loader-ellips__dot:nth-child(2) {
      left: 0;
    }
    .loader-ellips__dot:nth-child(3) { left: 1.5em; }
    .loader-ellips__dot:nth-child(4) { left: 3em; }

    @keyframes reveal {
      from { transform: scale(0.001); }
      to { transform: scale(1); }
    }

    @keyframes slide {
      to { transform: translateX(1.5em) }
    }

    .loader-ellips__dot:nth-child(1) {
      animation-name: reveal;
    }

    .loader-ellips__dot:nth-child(2),
    .loader-ellips__dot:nth-child(3) {
      animation-name: slide;
    }

    .loader-ellips__dot:nth-child(4) {
      animation-name: reveal;
      animation-direction: reverse;
    }
    ```
  </div>
  <div class="duo__cell example__demo">
    {{> loader-ellips}}
    {{> edit-demo default="owWLYz" }}
  </div>
</div>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` html
    <div class="loader-wheel">
      <i><i><i><i><i><i><i><i><i><i><i><i>
      </i></i></i></i></i></i></i></i></i></i></i></i>
    </div>
    ```

    ``` css
    .loader-wheel {
      font-size: 64px; /* change size here */
      position: relative;
      height: 1em;
      width: 1em;
      padding-left: 0.45em;
      overflow: hidden;
      margin: 0 auto;
      animation: loader-wheel-rotate 0.5s steps(12) infinite;
    }

    .loader-wheel i {
      display: block;
      position: absolute;
      height: 0.3em;
      width: 0.1em;
      border-radius: 0.05em;
      background: #333; /* change color here */
      opacity: 0.8;
      transform: rotate(-30deg);
      transform-origin: center 0.5em;
    }

    @keyframes loader-wheel-rotate {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    ```
  </div>
  <div class="duo__cell example__demo">
    {{> loader-wheel}}
    {{> edit-demo default="KqadKj" }}
  </div>
</div>

<p></p>

{{! ----------------------------------------------------------------- }}

<h2>Google Analytics</h2>

<p>Use Infinite Scroll events to <a href="https://developers.google.com/analytics/devguides/collection/analyticsjs/pages">track pageviews with Google Analytics</a>.</p>

<p>With <a href="options.html#history"><code>history</code> option</a> enabled, use the <a href="events.html#history"><code>history</code> event</a>.</p>

``` js
$container.on( 'history.infiniteScroll', function() {
  ga( 'set', 'page', location.pathname );
  ga( 'send', 'pageview' );
});
```

<p>With <code>history</code> option disabled, use the <a href="events.html#append"><code>append</code> or <a href="events.html#load"><code>load</code></a> event</a>.</p>

``` js
// link used to get absolute path, beginning with /
var link = document.createElement('a');

$container.on( 'append.infiniteScroll', function( event, response, path ) {
  link.href = path;
  ga( 'set', 'page', link.pathname );
  ga( 'send', 'pageview' );
});
```

{{! ----------------------------------------------------------------- }}

<h2>Browser support</h2>

<p>Infinite Scroll v3 supports IE/Edge 11, Android 4+, Safari for iOS 8+, Firefox 29+, and Chrome 33+.</p>

{{! ----------------------------------------------------------------- }}

<h2>WordPress Plugin</h2>

<p>The official WordPress plugin for Infinite Scroll v3 is in the works. Until then, you can continue using <a href="https://wordpress.org/plugins/infinite-scroll/">the previous Infinite Scroll v2 WordPress plugin</a>.</p>

{{! ----------------------------------------------------------------- }}

<h2>Upgrading from v2</h2>

<p>Infinite Scroll v3 is a complete rewrite with all new API and behavior. Upgrading from v2 to v3 will require making several changes.</p>

<ul>
  <li><code>.infinitescroll()</code> jQuery plugin renamed to camelCased <code>.infiniteScroll()</code>.</li>
  <li>The callback argument has been removed. Use <a href="events.html#append"><code>append</code></a> or <a href="events.html#load"><code>load</code></a> event.</li>
</ul>

{{! ----------------------------------------------------------------- }}

<h3>Upgrading v2 options</h3>

<ul>
  <li><code>itemSelector</code>:
    Use <a href="options.html#append"><code>append</code></a> to select items to append.</li>
  <li><code>nextSelector</code>:
    Set <a href="options.html#path"><code>path</code></a> to a selector string of a link to the next page to use its <code>href</code> value.
    Use <a href="options.html#hideNav"><code>hideNav</code></a> to hide navigation.</li>
  <li><code>binder</code>:
    Use <a href="options.html#elementscroll"><code>elementScroll</code></a> to scroll within an element.</li>
  <li><code>path</code>:
    <a href="options.html#path"><code>path</code></a> works differently.</li>
  <li><code>pathParse</code>:
    Use <a href="options.html#path"><code>path</code></a>.</li>
  <li><code>prefill</code>:
    <a href="options.html#prefilll">Backwards compatible</a>, works in v3.</li>
  <li><code>dataType</code>:
    Use <a href="options.html#responsetype"><code>responseType</code></a> to load data content like JSON.</li>
  <li><code>animate</code> &amp; <code>extraScrollPx</code>:
    Scrolling animation has been removed in v3.</li>
  <li><code>maxPage</code>:
    removed in v3. Use conditional event logic, like in <a href="#scroll-2-pages-then-load-with-button">scroll 2 pages then button example</a>.</li>
  <li><code>appendCallback</code>:
    Use <a href="events.html#append"><code>append</code> event</a>.</li>
  <li><code>errorCallback</code>:
    Use <a href="events.html#error"><code>error</code> event</a>.</li>
  <li><code>debug</code>:
    <a href="options.html#debug">Backwards compatible</a>, works in v3.</li>
  <li><code>loading</code>
    <ul>
      <li><code>finished</code>:
        Use <a href="events.html#load"><code>load</code> event</a>.</li>
      <li><code>finishedMsg</code>:
        Use <a href="options.html#status"><code>status</code></a> and set message HTML in <code>.infinite-scroll-error</code> and <code>.infinite-scroll-last</code>.</li>
      <li><code>img</code> &amp; <code>msgText</code>:
        Use <a href="options.html#status"><code>status</code></a> and set loading HTML in <code>.infinite-scroll-request</code>.</li>
    </ul>
  </li>
</ul>

{{! ----------------------------------------------------------------- }}

<h3>Upgrading v2 methods</h3>

<ul>
  <li><code>pause</code>, <code>resume</code>, &amp; <code>toggle</code>:
    Enable and disable <a href="options.html#loadonscroll"><code>loadOnScroll</code> option</a>.</li>
  <li><code>bind</code> &amp; <code>unbind</code>:
    Disable and re-set <a href="options.html#scrollthreshold"><code>scrollThreshold</code> option</a>.</li>
  <li><code>retrieve</code>:
    Use <a href="api.html#loadnextpage"><code>loadNextPage</code></a>.</li>
  <li><code>update</code>:
    Use <a href="api.html#option"><code>option</code></a>.</li>
  <li><code>destroy</code>:
    <a href="api.html#destroy">Backward compatible</a>, works in v3.</li>
</ul>

{{! ----------------------------------------------------------------- }}

<h3>v2 upgrade example</h3>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    // Infinite Scroll v2
    $('.container').infinitescroll({
      itemSelector: '.post',
      nextSelector: '.pagination__next',
      loading: {
        img: '/loading.gif',
        msgText: 'Loading...',
        finished: 'Congratulations, you have reached the end of the internet',
      },
    // callback
    }, function( items ) {
      $( items ).tooltip();
    });
    ```
  </div>
  <div class="duo__cell example__code">
    ``` js
    // Infinite Scroll v3
    var $container = $('.container').infinitescroll({
      append: '.post',
      path: '.pagination__next',
      status: '.page-load-status',
    });

    // use event for v2 callback
    $container.on( 'append.infiniteScroll', function( event, response, path, items ) {
      $( items ).tooltip();
    });
    ```
    
    ``` html
    <div class="container">
      <<article class="post">...</article>">...</div>
      <<article class="post">...</article>">...</div>
      ...
    </div>
    <!-- use status element for v2 loading options -->
    <div class="page-load-status">
      <div class="infinite-scroll-request">
        <img src="/loading.gif" alt="Loading" />
        Loading...
      </div>
      <p class="infinite-scroll-error infinite-scroll-last">
        Congratulations, you have reached the end of the internet
      </p>
    </div>
    ```
  </div>
</div>

{{! ----------------------------------------------------------------- }}

<h2>Issues</h2>

<h3>Reduced test cases</h3>

<p>Creating a reduced test case is the best way to debug problems and report issues. Read <a href="http://css-tricks.com/reduced-test-cases/">CSS Tricks</a> on why they&rsquo;re so great.</p>

<p>Create a reduced test case for Infinite Scroll by forking any one of the <a href="http://codepen.io/desandro/tag/infinite-scroll-docs">CodePen demos</a> from these docs.</p>

<ul>
  <li>A reduced test case clearly demonstrates the bug or issue.</li>
  <li>It contains the bare minimum HTML, CSS, and JavaScript required to demonstrate the bug.</li>
  <li>A link to your production site is <b>not</b> a reduced test case.</li>
</ul>

<p>Creating a reduced test case is the best way to get your issue addressed. They help you point out the problem. They help us debug the problem. They help others understand the problem.</p>

{{! ----------------------------------------------------------------- }}

<h3>Submitting issues</h3>

<p>Report <a href="https://github.com/metafizzy/infinite-scroll/issues/">issues on GitHub</a>. Make sure to include a <strong>reduced test case</strong>. Without a reduced test case, your issue may be closed.</p>

{{! ----------------------------------------------------------------- }}

<h3>Feature requests</h3>

<p>Help us select new features by looking over <a href="https://github.com/metafizzy/infinite-scroll/labels/feature%20request">requested features on the GitHub issue tracker</a> and adding your <strong>+1 reaction</strong> to features you&rsquo;d like to see added.</p>
